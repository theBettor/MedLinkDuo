// Generated by Dagger (https://dagger.dev).
package com.bettor.medlinkduo.data.measure;

import com.bettor.medlinkduo.domain.BleRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.bettor.medlinkduo.core.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MeasurementSupervisor_Factory implements Factory<MeasurementSupervisor> {
  private final Provider<BleRepository> repoProvider;

  private final Provider<CoroutineDispatcher> ioProvider;

  public MeasurementSupervisor_Factory(Provider<BleRepository> repoProvider,
      Provider<CoroutineDispatcher> ioProvider) {
    this.repoProvider = repoProvider;
    this.ioProvider = ioProvider;
  }

  @Override
  public MeasurementSupervisor get() {
    return newInstance(repoProvider.get(), ioProvider.get());
  }

  public static MeasurementSupervisor_Factory create(Provider<BleRepository> repoProvider,
      Provider<CoroutineDispatcher> ioProvider) {
    return new MeasurementSupervisor_Factory(repoProvider, ioProvider);
  }

  public static MeasurementSupervisor newInstance(BleRepository repo, CoroutineDispatcher io) {
    return new MeasurementSupervisor(repo, io);
  }
}
