// Generated by Dagger (https://dagger.dev).
package com.bettor.medlinkduo.core.di;

import com.bettor.medlinkduo.domain.BleRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.bettor.medlinkduo.core.di.AppScope")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_BleRepoFactory implements Factory<BleRepository> {
  private final Provider<CoroutineScope> scopeProvider;

  public AppModule_BleRepoFactory(Provider<CoroutineScope> scopeProvider) {
    this.scopeProvider = scopeProvider;
  }

  @Override
  public BleRepository get() {
    return bleRepo(scopeProvider.get());
  }

  public static AppModule_BleRepoFactory create(Provider<CoroutineScope> scopeProvider) {
    return new AppModule_BleRepoFactory(scopeProvider);
  }

  public static BleRepository bleRepo(CoroutineScope scope) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.bleRepo(scope));
  }
}
