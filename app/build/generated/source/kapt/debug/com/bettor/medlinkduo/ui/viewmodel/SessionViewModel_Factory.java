// Generated by Dagger (https://dagger.dev).
package com.bettor.medlinkduo.ui.viewmodel;

import com.bettor.medlinkduo.domain.EndMeasurementUseCase;
import com.bettor.medlinkduo.domain.PauseMeasurementUseCase;
import com.bettor.medlinkduo.domain.StartMeasurementUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SessionViewModel_Factory implements Factory<SessionViewModel> {
  private final Provider<StartMeasurementUseCase> startUseCaseProvider;

  private final Provider<PauseMeasurementUseCase> pauseUseCaseProvider;

  private final Provider<EndMeasurementUseCase> endUseCaseProvider;

  public SessionViewModel_Factory(Provider<StartMeasurementUseCase> startUseCaseProvider,
      Provider<PauseMeasurementUseCase> pauseUseCaseProvider,
      Provider<EndMeasurementUseCase> endUseCaseProvider) {
    this.startUseCaseProvider = startUseCaseProvider;
    this.pauseUseCaseProvider = pauseUseCaseProvider;
    this.endUseCaseProvider = endUseCaseProvider;
  }

  @Override
  public SessionViewModel get() {
    return newInstance(startUseCaseProvider.get(), pauseUseCaseProvider.get(), endUseCaseProvider.get());
  }

  public static SessionViewModel_Factory create(
      Provider<StartMeasurementUseCase> startUseCaseProvider,
      Provider<PauseMeasurementUseCase> pauseUseCaseProvider,
      Provider<EndMeasurementUseCase> endUseCaseProvider) {
    return new SessionViewModel_Factory(startUseCaseProvider, pauseUseCaseProvider, endUseCaseProvider);
  }

  public static SessionViewModel newInstance(StartMeasurementUseCase startUseCase,
      PauseMeasurementUseCase pauseUseCase, EndMeasurementUseCase endUseCase) {
    return new SessionViewModel(startUseCase, pauseUseCase, endUseCase);
  }
}
