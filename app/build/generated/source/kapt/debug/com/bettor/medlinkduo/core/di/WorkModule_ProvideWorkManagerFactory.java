// Generated by Dagger (https://dagger.dev).
package com.bettor.medlinkduo.core.di;

import android.content.Context;
import androidx.work.WorkManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class WorkModule_ProvideWorkManagerFactory implements Factory<WorkManager> {
  private final Provider<Context> ctxProvider;

  public WorkModule_ProvideWorkManagerFactory(Provider<Context> ctxProvider) {
    this.ctxProvider = ctxProvider;
  }

  @Override
  public WorkManager get() {
    return provideWorkManager(ctxProvider.get());
  }

  public static WorkModule_ProvideWorkManagerFactory create(Provider<Context> ctxProvider) {
    return new WorkModule_ProvideWorkManagerFactory(ctxProvider);
  }

  public static WorkManager provideWorkManager(Context ctx) {
    return Preconditions.checkNotNullFromProvides(WorkModule.INSTANCE.provideWorkManager(ctx));
  }
}
