// Generated by Dagger (https://dagger.dev).
package com.bettor.medlinkduo.data.ble;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.bettor.medlinkduo.core.di.AppScope")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MockBleRepository_Factory implements Factory<MockBleRepository> {
  private final Provider<CoroutineScope> scopeProvider;

  public MockBleRepository_Factory(Provider<CoroutineScope> scopeProvider) {
    this.scopeProvider = scopeProvider;
  }

  @Override
  public MockBleRepository get() {
    return newInstance(scopeProvider.get());
  }

  public static MockBleRepository_Factory create(Provider<CoroutineScope> scopeProvider) {
    return new MockBleRepository_Factory(scopeProvider);
  }

  public static MockBleRepository newInstance(CoroutineScope scope) {
    return new MockBleRepository(scope);
  }
}
